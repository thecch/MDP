package com.example.mdp_new;

import android.app.ProgressDialog;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothServerSocket;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.Intent;
import android.widget.Toast;
import android.util.Log;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.UUID;

public class BluetoothConnectionService {

    private static final String appName = "MDP_Group_29";
    public static final UUID myUUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    private static final String TAG = "BT_connection";
    public static BluetoothDevice bluetooth_device;
    private final BluetoothAdapter bluetooth_adapter;
    Context ctx;

    private ConnectThread connect_thread;
    private BluetoothDevice device;
    private UUID deviceUUID;
    ProgressDialog prog_dialog;
    Intent con_stat;

    public static boolean bt_con_stat = false;
    private static ConnectedThread mConnectedThread;

    public BluetoothConnectionService(Context context) {
        this.bluetooth_adapter = BluetoothAdapter.getDefaultAdapter();
        this.ctx = context;
    }

    private class ConnectThread extends Thread {
        private BluetoothSocket socket;

        public ConnectThread(BluetoothDevice dev, UUID u) {
            device = device;
            deviceUUID = u;
        }

        public void run() {
            BluetoothSocket tmp = null;

            try {
                tmp = device.createRfcommsocketToServiceRecord(deviceUUID);
            } catch (IOException ignored) {
            }
            socket = tmp;
            bluetooth_adapter.cancelDiscovery();

            try {
                socket.connect();

                connected(socket, device);
            } catch (IOException e) {
                try {
                    socket.close();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }

                try {
                    Bluetooth mBluetoothActivity = (Bluetooth) ctx;
                    mBluetoothActivity.runOnUiThread(
                            () -> Toast.makeText(ctx, "Failed to connect to the Device.", Toast.LENGTH_LONG).show());
                } catch (Exception z) {
                    z.printStackTrace();
                }

            }
            try {
                prog_dialog.dismiss();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
        }

        public void cancel() {
            try {
                socket.close();
            } catch (IOException ignored) {
            }
        }
    }

    public void startClientThread(BluetoothDevice device, UUID uuid) {
        try {
            bluetooth_device = device;
            prog_dialog = ProgressDialog.show(ctx, "Connecting Bluetooth", "Please Wait...", true);
        } catch (Exception ignored) {
        }

        connect_thread = new ConnectThread(device, uuid);
        connect_thread.start();
    }

    public void fastConnect() {
        Log.d(TAG, bluetooth_device.getName());
        connect_thread = new ConnectThread(bluetooth_device, myUUID);
        connect_thread.start();
    }

    private class ConnectedThread extends Thread {
        private final InputStream inStream;
        private final OutputStream outStream;

        public ConnectedThread(BluetoothSocket socket) {

            con_stat = new Intent("con_stat");
            con_stat.putExtra("Status", "connected");
            con_stat.putExtra("Device", device);
            LocalBroadcastManager.getInstance(ctx).sendBroadcast(con_stat);
            bt_con_stat = true;

            InputStream tmpIn = null;
            OutputStream tmpOut = null;

            try {
                tmpIn = socket.getInputStream();
                tmpOut = socket.getOutputStream();
            } catch (IOException e) {
                e.printStackTrace();
            }

            inStream = tmpIn;
            outStream = tmpOut;
        }

        public void run() {
            byte[] buffer = new byte[1024];
            int bytes;

            while (true) {
                try {
                    bytes = inStream.read(buffer);
                    String incomingmessage = new String(buffer, 0, bytes);

                    Intent incomingMessageIntent = new Intent("incomingMessage");
                    incomingMessageIntent.putExtra("receivedMessage", incomingmessage);

                    LocalBroadcastManager.getInstance(ctx).sendBroadcast(incomingMessageIntent);
                } catch (IOException e) {

                    con_stat = new Intent("con_stat");
                    con_stat.putExtra("Status", "disconnected");
                    con_stat.putExtra("Device", device);
                    LocalBroadcastManager.getInstance(ctx).sendBroadcast(con_stat);
                    bt_con_stat = false;
                    break;
                }
            }
        }

        public void write(byte[] bytes) {
            try {
                outStream.write(bytes);
            } catch (IOException ignored) {
            }
        }
    }

    private void connected(BluetoothSocket socket, BluetoothDevice device) {
        device = device;
        mConnectedThread = new ConnectedThread(socket);
        mConnectedThread.start();
    }

    public static void write(byte[] out) {
        mConnectedThread.write(out);
    }

    public static boolean sendMessage(String msg) {
        if (bt_con_stat == true) {
            byte[] bytes = msg.getBytes(Charset.defaultCharset());
            BluetoothConnectionService.write(bytes);
            return true;
        }
        return false;
    }
}